# Please change format and folder paths

[DEFAULT]
SNAPSHOT = False
# OS: 'windows' or 'linux'
OS = windows

# If True, you may expirience a time delay
FORCE_PROCESS_ALL_FRAMES = True

# If USE_SERVER is false, the script simulator.py is run.
USE_SERVER = False

# If USE_SERVER is true, image fror SLAMP will be retrieved from this remote folder
LAUNCH_SERVER_PATH = ./Server_Connection/c++_send_images/server

# If USE_SERVER is false, the script simulator.py is run and will lookf for images to be streameed in this folder
SIMULATOR_IMG_DIR = D:\Ahmad_Sordine\originala_data\data_16_ottobre

# Images where the simulator will save the images for SLAM procesisng
IMGS_FROM_SERVER = ./imgs

#If using the simulator, take one image every STEP
STEP = 1

# The simulator will save images in this format
IMG_FORMAT = jpg

# For now equalization run inside simulator, do not work for images from server
EQUALIZE = False

# Enable debug mode
DEBUG = True

# MAX NUMBER TO PROCESS AT EACH LOOP
MAX_IMG_BATCH_SIZE = 50
SIMULATOR_SLEEP_TIME = 0.25
SLEEP_TIME = 0.001
LOOP_CYCLES = 10000000

# COLMAP_EXE_DIR is the PARENT FOLDER of colmap exec!
COLMAP_EXE_DIR = C:\Users\threedom\Desktop\COLMAP\COLMAP-3.10-windows-cuda

INITIAL_SEQUENTIAL_OVERLAP = 1

# RE-INITIALIZE THE MODEL
# Percentage of oriented keyframes before reinitialization
MIN_ORIENTED_RATIO = 0.0001 
NOT_ORIENTED_KFMS = 30


[CALIBRATION]
# OPENCV camera model (see COLMAP doc)
# {
#    "0": "(SIMPLE_PINHOLE, 3)",
#    "1": "(PINHOLE, 4)",
#    "2": "(SIMPLE_RADIAL, 4)",
#    "3": "(RADIAL, 5)",
#    "4": "(OPENCV, 8)",
#    "5": "(OPENCV_FISHEYE, 8)",
#    "6": "(SIMPLE_RAFULL_OPENCVDIAL, 12)",
#    "7": "(FOV, 5)",
#    "8": "(SIMPLE_RADIAL_FISHEYE, 4)",
#    "9": "(RADIAL_FISHEYE, 5)",
#    "10": "(THIN_PRISM_FISHEYE, 12)"
# }
#N_CAMERAS = 3
#CAM0 = 5,612,512,195.07,195.07,306,256,-0.061994377915047159,-0.0089805087687381043,0.0055001996905766747,-0.0013704849022069829
#CAM1 = 5,612,512,194.5736,196.1640,306,256,-0.075546413726979081,0.02043885334003822,-0.0091258032236714148,0.00070804492412302172
#CAM2 = 5,612,512,192.36,192.67,306,256,0.10167190495423137,-0.35669086565534036,0.26992191475857952,-0.0015067274115237847
#CAM3 = 
#CAM4 = 
#BASELINE_CAM0_CAM1 = 0.10812
N_CAMERAS = 3
CAM0 = 5,612,512,193.8274,193.6930,302.5835,253.9930,-0.05722701361723864,0.00016322647381115254,-0.0021259494992572872,0.00020591252677002806
CAM1 = 5,612,512,193.3995,193.3075,315.4122,257.2891,-0.05579606471366262,-0.0003823154408683274,-0.001845995484560353,0.00016873227372808498
CAM2 = 5,612,512,194.1011,194.2052,301.3723,262.2584,-0.06278169366901139,0.0058443625402422395,-0.005301566312875602,0.00095967581
CAM3 = 
CAM4 = 
BASELINE_CAM0_CAM1 = 0.10812

[KEYFRAME_SELECTION]
# KEYFRAME_SELECTION_METHOD: 'local_features'
METHOD = local_features
# LOCAL_FEATURE: 'ORB', 'ALIKE', 'KeyNetAffNetHardNet'
LOCAL_FEATURE = ALIKE
N_FEATURES = 512
INNOVATION_THRESH_PIX = 5
MIN_MATCHES = 5
ERROR_THRESHOLD = 4
MAX_ITERATIONS = 1000

# ALIKE OPTIONS
ALIKE_MODEL = alike-s
ALIKE_DEVICE = cuda
ALIKE_SCORES_TH = 0.2
ALIKE_N_LIMIT = 5000
ALIKE_SUBPIXEL = False

# ORB OPTIONS
# See https://docs.opencv.org/4.x/db/d95/classcv_1_1ORB.html
ORB_SCALE_FACTOR = 1.2
ORB_NLEVELS = 1
ORB_EDGE_THRESHOLD = 1
ORB_FIRST_LEVEL = 0
ORB_WTA_K = 2
# ORB_SCORE_TYPE = {'HARRIS_SCORE': 0, 'FAST_SCORE':1}
ORB_SCORE_TYPE = 0
ORB_PATCH_SIZE = 31
ORB_FAST_THRESHOLD = 0

[EXTERNAL_SENSORS]
# Exif GNSS coordinates are read directly from the images.
# If camera coordinates are known from other sensors,
# they can be stored in a txt file and used to scale 
# the photogrammetric model in the format id, x, y, z.
# Exif data, if present, takes priority
USE_EXTERNAL_CAM_COORD = False
CAMERA_COORDINATES_FILE =

[LOCAL_FEATURES]
N_FEATURES = 1000
MIN_MATCHES = 25
# LOCAL_FEATURE: 'RootSIFT', 'ORB', 'ALIKE', 'KeyNetAffNetHardNet', 'SuperGlue', 'DISK', 'SuperPoint', 'LoFTR'
LOCAL_FEATURE = ALIKE

SUPERGLUE_NMS_RADIUS = 4
SUPERGLUE_KEYPOINT_THRESHOLD = 0.005
SUPERGLUE_WEIGHTS = indoor
SUPERGLUE_SINKHORN_ITERATIONS = 20
SUPERGLUE_MATCH_THRESHOLD = 0.2

ALIKE_MODEL = alike-l
ALIKE_DEVICE = cuda
ALIKE_SCORES_TH = 0.2
ALIKE_N_LIMIT = 5000
ALIKE_SUBPIXEL = True

# See https://docs.opencv.org/4.x/db/d95/classcv_1_1ORB.html
ORB_SCALE_FACTOR = 1.2
ORB_NLEVELS = 1
ORB_EDGE_THRESHOLD = 1
ORB_FIRST_LEVEL = 0
ORB_WTA_K = 2
# ORB_SCORE_TYPE = {'HARRIS_SCORE': 0, 'FAST_SCORE':1}
ORB_SCORE_TYPE = 0
ORB_PATCH_SIZE = 31
ORB_FAST_THRESHOLD = 0

[LOCAL_FEATURES_2]
USE_ADDITIONAL_FEATURES = False
N_FEATURES = 750
# LOCAL_FEATURE: 'SuperPoint'
LOCAL_FEATURE = SuperPoint

[MATCHING]
# For KORNIA_MATCHER: nn, snn, mnn, smnn, adalam or lightglue, loftr to be finished. See Kornia matcher options, if in doubt set to smnn.
KORNIA_MATCHER = smnn
RATIO_THRESHOLD = 0.85
# GEOMETRIC_VERIFICATION = 'ransac', 'pydegensac'
GEOMETRIC_VERIFICATION = pydegensac
MAX_ERROR = 3
CONFIDENCE = 0.999
ITERATIONS = 1000
LOOP_CLOSURE_DETECTION = False
VOCAB_TREE = /home/luca/Github_3DOM/vocab_tree_flickr100K_words32K.bin

[INCREMENTAL_RECONSTRUCTION]
MIN_KEYFRAME_FOR_INITIALIZATION = 5