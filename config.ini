# Please change format and folder paths

[DEFAULT]
SNAPSHOT = False
# OS: 'windows' or 'linux'
OS = linux

# If True, you may expirience a time delay
FORCE_PROCESS_ALL_FRAMES = False

# If USE_SERVER is false, the script simulator.py is run.
USE_SERVER = False

# If USE_SERVER is true, image fror SLAMP will be retrieved from this remote folder
LAUNCH_SERVER_PATH = ./Server_Connection/c++_send_images/server

# If USE_SERVER is false, the script simulator.py is run and will lookf for images to be streameed in this folder
SIMULATOR_IMG_DIR = /media/luca/T7/NewCalibrationImageExports/2022-07-01-Seq2/cs

# Images where the simulator will save the images for SLAM procesisng
IMGS_FROM_SERVER = ./imgs

#If using the simulator, take one image every STEP
STEP = 1

# The simulator will save images in this format
IMG_FORMAT = jpg

# For now equalization run inside simulator, do not work for images from server
EQUALIZE = False

# Enable debug mode
DEBUG = True

# MAX NUMBER TO PROCESS AT EACH LOOP
MAX_IMG_BATCH_SIZE = 1
SIMULATOR_SLEEP_TIME = 0.05
SLEEP_TIME = 0.01
LOOP_CYCLES = 10000000

# COLMAP_EXE_DIR is the PARENT FOLDER of colmap exec!
COLMAP_EXE_DIR = /home/luca/Desktop/gitprojects/colmap/build/src/colmap/exe

INITIAL_SEQUENTIAL_OVERLAP = 1

# RE-INITIALIZE THE MODEL
# Percentage of oriented keyframes before reinitialization
MIN_ORIENTED_RATIO = 0.0001 
NOT_ORIENTED_KFMS = 1


[CALIBRATION]
# OPENCV camera model (see COLMAP doc)
# {
#    "0": "(SIMPLE_PINHOLE, 3)",
#    "1": "(PINHOLE, 4)",
#    "2": "(SIMPLE_RADIAL, 4)",
#    "3": "(RADIAL, 5)",
#    "4": "(OPENCV, 8)",
#    "5": "(OPENCV_FISHEYE, 8)",
#    "6": "(SIMPLE_RAFULL_OPENCVDIAL, 12)",
#    "7": "(FOV, 5)",
#    "8": "(SIMPLE_RADIAL_FISHEYE, 4)",
#    "9": "(RADIAL_FISHEYE, 5)",
#    "10": "(THIN_PRISM_FISHEYE, 12)"
# }
N_CAMERAS = 1
CAM0 = 5,640,400,388.51513164699998,388.31503542199999,308.25604331599999,206.623340603,-0.025747874635265695,0.029847559929508459,-0.075015464777887772,0.042278358556916071
CAM1 = 
CAM2 =
CAM3 =
CAM4 =
BASELINE_CAM0_CAM1 = 0.110078

[KEYFRAME_SELECTION]
# KEYFRAME_SELECTION_METHOD: 'local_features'
METHOD = local_features
# LOCAL_FEATURE: 'ORB', 'ALIKE', 'KeyNetAffNetHardNet'
LOCAL_FEATURE = ALIKE
N_FEATURES = 512
INNOVATION_THRESH_PIX = 5
MIN_MATCHES = 5
ERROR_THRESHOLD = 4
MAX_ITERATIONS = 1000

# ALIKE OPTIONS
ALIKE_MODEL = alike-s
ALIKE_DEVICE = cuda
ALIKE_SCORES_TH = 0.2
ALIKE_N_LIMIT = 5000
ALIKE_SUBPIXEL = False

# ORB OPTIONS
# See https://docs.opencv.org/4.x/db/d95/classcv_1_1ORB.html
ORB_SCALE_FACTOR = 1.2
ORB_NLEVELS = 1
ORB_EDGE_THRESHOLD = 1
ORB_FIRST_LEVEL = 0
ORB_WTA_K = 2
# ORB_SCORE_TYPE = {'HARRIS_SCORE': 0, 'FAST_SCORE':1}
ORB_SCORE_TYPE = 0
ORB_PATCH_SIZE = 31
ORB_FAST_THRESHOLD = 0

[EXTERNAL_SENSORS]
# Exif GNSS coordinates are read directly from the images.
# If camera coordinates are known from other sensors,
# they can be stored in a txt file and used to scale 
# the photogrammetric model in the format id, x, y, z.
# Exif data, if present, takes priority
USE_EXTERNAL_CAM_COORD = False
CAMERA_COORDINATES_FILE =

[LOCAL_FEATURES]
N_FEATURES = 1500
MIN_MATCHES = 25
# LOCAL_FEATURE: 'RootSIFT', 'ORB', 'ALIKE', 'KeyNetAffNetHardNet', 'SuperGlue', 'DISK', 'SuperPoint', 'LoFTR'
LOCAL_FEATURE = SuperGlue

SUPERGLUE_NMS_RADIUS = 4
SUPERGLUE_KEYPOINT_THRESHOLD = 0.005
SUPERGLUE_WEIGHTS = outdoor
SUPERGLUE_SINKHORN_ITERATIONS = 20
SUPERGLUE_MATCH_THRESHOLD = 0.2
#alike-l
ALIKE_MODEL = alike-s
ALIKE_DEVICE = cuda
ALIKE_SCORES_TH = 0.2
ALIKE_N_LIMIT = 5000
ALIKE_SUBPIXEL = True

# See https://docs.opencv.org/4.x/db/d95/classcv_1_1ORB.html
ORB_SCALE_FACTOR = 1.2
ORB_NLEVELS = 1
ORB_EDGE_THRESHOLD = 1
ORB_FIRST_LEVEL = 0
ORB_WTA_K = 2
# ORB_SCORE_TYPE = {'HARRIS_SCORE': 0, 'FAST_SCORE':1}
ORB_SCORE_TYPE = 0
ORB_PATCH_SIZE = 31
ORB_FAST_THRESHOLD = 0

[LOCAL_FEATURES_2]
USE_ADDITIONAL_FEATURES = False
N_FEATURES = 750
# LOCAL_FEATURE: 'SuperPoint'
LOCAL_FEATURE = SuperPoint

[MATCHING]
# For KORNIA_MATCHER: nn, snn, mnn, smnn, adalam or lightglue, loftr to be finished. See Kornia matcher options, if in doubt set to smnn.
KORNIA_MATCHER = smnn
RATIO_THRESHOLD = 0.95
# GEOMETRIC_VERIFICATION = 'ransac', 'pydegensac'
GEOMETRIC_VERIFICATION = pydegensac
MAX_ERROR = 3
CONFIDENCE = 0.999
ITERATIONS = 1000
LOOP_CLOSURE_DETECTION = False
VOCAB_TREE = /home/luca/Github_3DOM/vocab_tree_flickr100K_words32K.bin

[INCREMENTAL_RECONSTRUCTION]
MIN_KEYFRAME_FOR_INITIALIZATION = 5